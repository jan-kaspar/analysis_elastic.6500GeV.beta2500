void Environment::InitNominal()
{
	// beam momentum (GeV)
	p = p_L = p_R = 6500.;

	// momentum uncertainty
	si_de_p = 1E-3 * p;

	// beam divergence (one-arm angular smearing without detector effects) (rad)
	si_th_x_L = si_th_x_R = 0.33E-6;
	si_th_y_L = si_th_y_R = 0.37E-6 / sqrt(2.);

	// vertex smearing (mm)
	si_vtx_x = si_vtx_y = 580E-3;

	// pitch-induced error (mm), later adjusted by parameters.h
	si_de_P_L = si_de_P_R = 12E-3;

	// optics: v_x and v_y [1], L_x and L_y [mm]
	v_x_R_1_F = -0.63263562078653; L_x_R_1_F = 71.181685562871E3; v_y_R_1_F = 0.0509593091754162; L_y_R_1_F = 250.978239123353E3;
	v_x_R_2_F = -0.53753793527885; L_x_R_2_F = 49.416844799644E3; v_y_R_2_F = 0.0310874912342514; L_y_R_2_F = 290.472615273913E3;

	v_x_L_1_F = -0.63905655897978; L_x_L_1_F = 72.761670545674E3; v_y_L_1_F = 0.0409138387529979; L_y_L_1_F = 245.987267374614E3;
	v_x_L_2_F = -0.54253102599577; L_x_L_2_F = 50.817824053252E3; v_y_L_2_F = 0.0188663508259065; L_y_L_2_F = 284.521874255628E3;


	// optics: x-y coupling
	/*
	la_x_L_F = la_x_L_N = la_x_R_N = la_x_R_F = 0.;	// mm
	la_y_L_F = la_y_L_N = la_y_R_N = la_y_R_F = 0.;	// mm
	*/

	// alignment uncertainties
	// TODO
	si_de_x = 0E-3;
	si_de_y_R = 0E-3;
	si_de_y_D = 0E-3;
	si_tilt = 0E-3;

	// other uncertainties
	// TODO
	si_th_y_RL_assym_unc = 0.;
}

//----------------------------------------------------------------------------------------------------

void Environment::UseMatchedOptics()
{
	printf(">> Environment::UseMatchedOptics\n");

	/*
	{
		printf("    matched optics sent by Frici on 22 June 2017 (only values, no uncertainties)\n");

		v_x_R_1_F = -0.625753648922483; L_x_R_1_F = 71.4564234171935E3; v_y_R_1_F = +0.01763006780303220; L_y_R_1_F = 249.865713355765E3;
		v_x_R_2_F = -0.532247902676385; L_x_R_2_F = 49.5904659843860E3; v_y_R_2_F = -0.00761435923006886; L_y_R_2_F = 289.196230625578E3;

		v_x_L_1_F = -0.635754795266042; L_x_L_1_F = 72.9246512002493E3; v_y_L_1_F = +0.01474374442353870; L_y_L_1_F = 245.002899367161E3;
		v_x_L_2_F = -0.540314704978439; L_x_L_2_F = 50.9683216703607E3; v_y_L_2_F = -0.01151442181078190; L_y_L_2_F = 283.363551065363E3;
	}
	*/

	{
		printf("    matched optics - values - sent by Frici on 18 July 2017\n");

		v_x_R_1_F = -0.624480890678214; L_x_R_1_F = 71.6313352966373E3; v_y_R_1_F = +0.0256382652163028; L_y_R_1_F = 249.560912271120E3;
		v_x_R_2_F = -0.532035445567328; L_x_R_2_F = 49.8325814100747E3; v_y_R_2_F = +0.0016551137486863; L_y_R_2_F = 288.785773998112E3;

		v_x_L_1_F = -0.634471991166059; L_x_L_1_F = 73.0465736552453E3; v_y_L_1_F = +0.0087825192548474; L_y_L_1_F = 244.675106371203E3;
		v_x_L_2_F = -0.539640116704832; L_x_L_2_F = 51.0992887566237E3; v_y_L_2_F = -0.0184435346429805; L_y_L_2_F = 282.962119245175E3;
	}

	{
		printf("    matched optics - uncertainties - sent by Frici on 13 Oct 2017\n");

		double opt_cov_data[] = {
			8.30E-06, 0.000323525, -2.63E-05, -0.00093985, 6.22E-06, 0.000229023, -3.05E-05, -0.00108449, 6.59E-06, 0.000284609, -2.72E-05, -0.000962666, 4.97E-06, 0.000197328, -3.16E-05, -0.00111061,
			0.000323525, 0.0161945, -0.00112852, -0.040527, 0.000247483, 0.0111701, -0.00131031, -0.046601, 0.000291546, 0.0128734, -0.00115323, -0.0413904, 0.000220193, 0.00893077, -0.0013393, -0.0477349,
			-2.63E-05, -0.00112852, 0.000136349, 0.0039143, -2.00E-05, -0.000746185, 0.000158241, 0.00450476, -2.65E-05, -0.00111751, 0.000114576, 0.00399593, -1.99E-05, -0.00077428, 0.000133053, 0.00461216,
			-0.00093985, -0.040527, 0.0039143, 0.138361, -0.000709603, -0.0282746, 0.00454369, 0.159657, -0.000949946, -0.0401798, 0.00404491, 0.141637, -0.000714814, -0.0278545, 0.00469727, 0.163472,
			6.22E-06, 0.000247483, -2.00E-05, -0.000709603, 4.66E-06, 0.00017459, -2.32E-05, -0.0008185, 4.98E-06, 0.000215771, -2.05E-05, -0.000726592, 3.76E-06, 0.000149602, -2.38E-05, -0.00083823,
			0.000229023, 0.0111701, -0.000746185, -0.0282746, 0.00017459, 0.00779099, -0.000866412, -0.0325438, 0.000203525, 0.00896998, -0.000805826, -0.0289039, 0.000153689, 0.00622316, -0.000935842, -0.0333353,
			-3.05E-05, -0.00131031, 0.000158241, 0.00454369, -2.32E-05, -0.000866412, 0.000183648, 0.00522908, -3.08E-05, -0.00129728, 0.000132997, 0.00463843, -2.31E-05, -0.000898837, 0.000154444, 0.00535375,
			-0.00108449, -0.046601, 0.00450476, 0.159657, -0.0008185, -0.0325438, 0.00522908, 0.184247, -0.00109585, -0.0463264, 0.00466901, 0.16345, -0.000824565, -0.0321155, 0.00542202, 0.188648,
			6.59E-06, 0.000291546, -2.65E-05, -0.000949946, 4.98E-06, 0.000203525, -3.08E-05, -0.00109585, 8.58E-06, 0.000327509, -2.73E-05, -0.000971881, 6.40E-06, 0.000230778, -3.17E-05, -0.00112164,
			0.000284609, 0.0128734, -0.00111751, -0.0401798, 0.000215771, 0.00896998, -0.00129728, -0.0463264, 0.000327509, 0.0159027, -0.00114802, -0.041215, 0.000249533, 0.0109304, -0.00133344, -0.0474047,
			-2.72E-05, -0.00115323, 0.000114576, 0.00404491, -2.05E-05, -0.000805826, 0.000132997, 0.00466901, -2.73E-05, -0.00114802, 0.000144985, 0.00415322, -2.06E-05, -0.000755143, 0.000168338, 0.00478172,
			-0.000962666, -0.0413904, 0.00399593, 0.141637, -0.000726592, -0.0289039, 0.00463843, 0.16345, -0.000971881, -0.041215, 0.00415322, 0.145014, -0.000731546, -0.0285454, 0.00482305, 0.167357,
			4.97E-06, 0.000220193, -1.99E-05, -0.000714814, 3.76E-06, 0.000153689, -2.31E-05, -0.000824565, 6.40E-06, 0.000249533, -2.06E-05, -0.000731546, 4.78E-06, 0.000175268, -2.40E-05, -0.00084396,
			0.000197328, 0.00893077, -0.00077428, -0.0278545, 0.000149602, 0.00622316, -0.000898837, -0.0321155, 0.000230778, 0.0109304, -0.000755143, -0.0285454, 0.000175268, 0.00759423, -0.00087712, -0.032862,
			-3.16E-05, -0.0013393, 0.000133053, 0.00469727, -2.38E-05, -0.000935842, 0.000154444, 0.00542202, -3.17E-05, -0.00133344, 0.000168338, 0.00482305, -2.40E-05, -0.00087712, 0.000195454, 0.0055529,
			-0.00111061, -0.0477349, 0.00461216, 0.163472, -0.00083823, -0.0333353, 0.00535375, 0.188648, -0.00112164, -0.0474047, 0.00478172, 0.167357, -0.00084396, -0.032862, 0.0055529, 0.193159,
		};
		opt_cov.SetMatrixArray(opt_cov_data);

		TMatrixDSymEigen eig_decomp(opt_cov);
		TVectorD eig_values(eig_decomp.GetEigenValues());
		TMatrixDSym S(16);
		for (unsigned int i = 0; i < 16; i++)
			S(i, i) = (eig_values(i) >= 0.) ? sqrt(eig_values(i)) : 0.;
		opt_per_gen = eig_decomp.GetEigenVectors() * S;
	}
}
