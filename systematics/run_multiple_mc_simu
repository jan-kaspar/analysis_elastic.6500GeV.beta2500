#!/bin/bash

#----------------------------------------------------------------------------------------------------
# defaults

diagonals=(
	"45b_56t"
	"45t_56b"
)

configurations=(
	"fit2-2/none"

	"fit2-2/sh-thx"
	"fit2-2/sh-thx-LRasym"

	"fit2-2/sh-thy"
	"fit2-2/sh-thy-LRasym"
	"fit2-2/sh-thy-TBuncor"

	"fit2-2/tilt-thx-thy"
	"fit2-2/tilt-thx-thy-LRasym"

	"fit2-2/sc-thxy-mode1"
	"fit2-2/sc-thxy-mode2"
	"fit2-2/sc-thxy-mode3"

	"fit2-2/dx-sigma"
	"fit2-2/dy-sigma"
	"fit2-2/dx-non-gauss"

	"fit2-2/eff-intercept"
	"fit2-2/eff-slope"

	"fit2-2/beam-mom"

	"fit2-2/mx-sigma"
	"fit2-2/my-sigma"

	"fit2-2/norm"

	"fit2-4/none"
)

stat=""

use_lxbatch="n"
bsub_options="pool>1"
#bsub_queue="8nh"
bsub_queue="1nd"
submit="n"

#----------------------------------------------------------------------------------------------------
# parse command line

function PrintUsage()
{
	echo "USAGE: run_multiple_mc_simu [option] [option] ..."
	echo "OPTIONS:"
	echo "    -events <int>    number of events to simulate"
	echo "    -lxbatch         prepare jobs on LXBATCH instead of local machine"
	echo "    -submit          submit jobs to LXBATCH"
	echo "    -queue <string>  set LXBATCH queue"
}

while [ "$1" != "" ]
do
	key="$1"

	case $key in
		-h|--help)
			PrintUsage
			exit 0
		;;

		-events)
			stat="$2"
			shift
		;;

		-lxbatch)
			use_lxbatch="y"
		;;

		-submit)
			submit="y"
		;;

		-queue)
			bsub_queue="$2"
			shift
		;;

		*)
			echo "ERROR: unknown option '$key'."
			PrintUsage
			exit 1
		;;
	esac

	shift
done


#----------------------------------------------------------------------------------------------------
# consistency check

if [ "$stat" == "" ]
then
	echo "ERROR: statistics not defined. Use '-events' option."
	PrintUsage
	exit 2
fi

#----------------------------------------------------------------------------------------------------

function ExecuteOne()
{
	echo "* $dir/$scenario"

	local cwd=`pwd -P`

	local tag="$scenario"

	local job_dir="$cwd"
	local job_file="$dir/.${tag}.job"
	local job_log_file="$dir/.${tag}.log_job"

	local command="{ time ./mc_simu -model \"$model\" -diagonal \"$diagonal\" -scenario \"$scenario\" -events \"$stat\" -output \"$dir/$scenario.root\" ; } \&> \"$dir/$scenario.log\""

	cat "job_template" | sed "\
			s|\$JOB_DIR|$job_dir|; \
			s|\$JOB_LOG_FILE|$job_log_file|; \
			s|\$COMMAND|$command|; \
		" > "$job_file"
	chmod u+x "$job_file"

	if [ "$use_lxbatch" == "y" ]
	then
		if [ "$submit" == "y" ]
		then
			result=`bsub -R "$bsub_options" -q "$bsub_queue" -o /dev/null -e /dev/null "$cwd/$job_file"`
			echo "    $result"
		else
			echo "    would be submitted to $bsub_queue"
		fi
	else
		"./$job_file" &
	fi
}

#----------------------------------------------------------------------------------------------------

make "mc_simu" || exit 1

for diagonal in ${diagonals[*]}
do
	for configuration in ${configurations[*]}
	do
		model=${configuration%%/*}
		scenario=${configuration##*/}

		dir="data-mc/$stat/$diagonal/$model"
		mkdir -p "$dir"

		ExecuteOne
	done
done
